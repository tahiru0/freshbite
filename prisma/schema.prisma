// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  phone     String   @unique // Đổi từ email sang phone
  email     String?  // Email thành optional
  name      String?
  password  String
  role      Role     @default(CUSTOMER)
  address   String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]
  cartItems CartItem[]
  reviews Review[]
  userVouchers UserVoucher[]

  @@map("users")
}

enum Role {
  ADMIN
  CUSTOMER
}

// Category model for food categories
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]
  combos   Combo[]

  @@map("categories")
}

// Product model for food items
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  images      ProductImage[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]
  comboItems  ComboItem[]

  @@map("products")
}

// Combo model for food combos
model Combo {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  originalPrice Decimal? @db.Decimal(10, 2) // Giá gốc để tính discount
  isActive    Boolean  @default(true)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  images      ComboImage[]
  items       ComboItem[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]

  @@map("combos")
}

// Combo Items model - các sản phẩm trong combo
model ComboItem {
  id        String   @id @default(cuid())
  comboId   String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  // Relations
  combo   Combo   @relation(fields: [comboId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([comboId, productId])
  @@map("combo_items")
}

// Combo Images model - nhiều ảnh cho 1 combo
model ComboImage {
  id        String   @id @default(cuid())
  url       String
  publicId  String   // Cloudinary public ID để xóa ảnh
  alt       String?
  order     Int      @default(0) // Thứ tự hiển thị ảnh
  comboId   String
  createdAt DateTime @default(now())

  // Relations
  combo Combo @relation(fields: [comboId], references: [id], onDelete: Cascade)

  @@map("combo_images")
}

// Product Images model - nhiều ảnh cho 1 sản phẩm
model ProductImage {
  id        String   @id @default(cuid())
  url       String
  publicId  String   // Cloudinary public ID để xóa ảnh
  alt       String?
  order     Int      @default(0) // Thứ tự hiển thị ảnh
  productId String
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// Cart model for shopping cart
model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  userId    String
  productId String?
  comboId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  combo   Combo?   @relation(fields: [comboId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@unique([userId, comboId])
  @@map("cart_items")
}

// Order model
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  total           Decimal     @db.Decimal(10, 2)
  discount        Decimal     @default(0) @db.Decimal(10, 2)
  userId          String?     // Optional for guest orders
  customerName    String
  customerPhone   String
  customerEmail   String?
  customerAddress String
  notes           String?
  voucherCode     String?
  voucherId       String?     // Reference to voucher used
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  voucher    Voucher?    @relation(fields: [voucherId], references: [id], onDelete: SetNull)
  orderItems OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

// Order items model
model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  orderId   String
  productId String?
  comboId   String?
  createdAt DateTime @default(now())

  // Relations
  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  combo   Combo?   @relation(fields: [comboId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// Review model cho đánh giá sản phẩm và combo
model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 sao
  comment   String?
  userId    String
  productId String?
  comboId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  combo   Combo?   @relation(fields: [comboId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // 1 user chỉ review 1 sản phẩm 1 lần
  @@unique([userId, comboId])   // 1 user chỉ review 1 combo 1 lần
  @@map("reviews")
}

// Voucher model
model Voucher {
  id               String      @id @default(cuid())
  code             String      @unique
  name             String
  description      String?
  type             VoucherType @default(PERCENTAGE)
  value            Decimal     @db.Decimal(10, 2) // Giá trị giảm giá (% hoặc số tiền)
  minOrderAmount   Decimal?    @db.Decimal(10, 2) // Đơn hàng tối thiểu
  maxDiscountAmount Decimal?   @db.Decimal(10, 2) // Giảm tối đa (cho % discount)
  usageLimit       Int?        // Số lần sử dụng tối đa (null = không giới hạn)
  usedCount        Int         @default(0) // Số lần đã sử dụng
  userLimit        Int?        // Số lần 1 user có thể sử dụng (null = không giới hạn)
  isActive         Boolean     @default(true)
  startDate        DateTime    @default(now())
  endDate          DateTime?   // null = không hết hạn
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  orders    Order[]
  userVouchers UserVoucher[]

  @@map("vouchers")
}

enum VoucherType {
  PERCENTAGE // Giảm theo %
  FIXED      // Giảm số tiền cố định
}

// User Voucher Usage tracking
model UserVoucher {
  id        String   @id @default(cuid())
  userId    String
  voucherId String
  usedCount Int      @default(0) // Số lần user này đã dùng voucher
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  voucher Voucher @relation(fields: [voucherId], references: [id], onDelete: Cascade)

  @@unique([userId, voucherId])
  @@map("user_vouchers")
}
